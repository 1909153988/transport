{"remainingRequest":"D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\项目\\jusheng1\\src\\views\\order\\addorder\\index.vue?vue&type=template&id=65e3eb0b&scoped=true&","dependencies":[{"path":"D:\\项目\\jusheng1\\src\\views\\order\\addorder\\index.vue","mtime":1627990492150},{"path":"D:\\项目\\jusheng1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\项目\\jusheng1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}