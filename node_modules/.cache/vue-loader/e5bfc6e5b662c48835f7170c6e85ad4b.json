{"remainingRequest":"D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\项目\\jusheng1\\src\\views\\transport\\abnormal\\index.vue?vue&type=template&id=28cbd18b&scoped=true&","dependencies":[{"path":"D:\\项目\\jusheng1\\src\\views\\transport\\abnormal\\index.vue","mtime":1627990492424},{"path":"D:\\项目\\jusheng1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\项目\\jusheng1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}