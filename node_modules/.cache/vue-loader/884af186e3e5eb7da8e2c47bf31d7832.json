{"remainingRequest":"D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\项目\\jusheng1\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\项目\\jusheng1\\src\\views\\client\\account\\index.vue?vue&type=template&id=7b74f046&","dependencies":[{"path":"D:\\项目\\jusheng1\\src\\views\\client\\account\\index.vue","mtime":1627990487452},{"path":"D:\\项目\\jusheng1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\项目\\jusheng1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\jusheng1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}